package ca.jrvs.apps.trading.controller;

import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.view.TraderAccountView;
import ca.jrvs.apps.trading.service.TraderAccountService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import java.time.LocalDate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

@Api(value = "Trader", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
@RestController
@RequestMapping("/trader")
public class TraderAccountController {

  private final TraderAccountService service;

  @Autowired
  public TraderAccountController(TraderAccountService service) {
    this.service = service;
  }

  @ApiOperation(
      value = "Create a trader and an account",
      notes = "TraderId and AccountId are auto generated by the database."
          + "You can add more accounts for this trader later on."
  )
  @ResponseStatus(HttpStatus.CREATED)
  @PostMapping(
      path = "/firstName/{firstName}/lastName/{lastName}/dob/{dob}/country/{country}/email/{email}}",
      produces = {MediaType.APPLICATION_JSON_UTF8_VALUE}
  )
  public TraderAccountView createTrader(
      @PathVariable String firstName, @PathVariable String lastName,
      @PathVariable @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate dob,
      @PathVariable String country, @PathVariable String email) {

    Trader trader = new Trader(firstName, lastName, dob, country, email);
    try {
      return service.createTrader(trader);
    } catch (Exception e) {
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }

  @ApiOperation(
      value = "Add an account for the trader",
      notes = "AccountId are auto generated by the database."
  )
  @ResponseStatus(HttpStatus.CREATED)
  @PostMapping(
      path = "/traderId/{traderId}",
      produces = {MediaType.APPLICATION_JSON_UTF8_VALUE}
  )
  public TraderAccountView addAccount(@PathVariable Integer traderId) {
    try {
      return service.createAccountForTrader(traderId);
    } catch (Exception e) {
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }

  @ApiOperation(
      value = "Create a trader and an account with a DTO",
      notes = "TraderId and AccountId are auto generated by the database."
          + "One trader can create multiple account."
  )
  @ResponseStatus(HttpStatus.CREATED)
  @PostMapping(path = "/", produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
  public TraderAccountView createTrader(@RequestBody Trader trader) {
    try {
      return service.createTrader(trader);
    } catch (Exception e) {
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }

  @ApiOperation(
      value = "Delete a trader",
      notes = "Delete a trader and the associated accounts."
          + "Can be done IFF all accounts has zero balance and no open positions."
  )
  @ApiResponses(value = {@ApiResponse(code = 400, message = "Unable to delete the user")})
  @ResponseStatus(HttpStatus.OK)
  @DeleteMapping(path = "/traderId/{traderId}")
  public void deleteTrader(@PathVariable Integer traderId) {
    try {
      service.deleteTraderById(traderId);
    } catch (Exception e) {
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }

  @ApiOperation(
      value = "Deposit a fund",
      notes = "Deposit a fund to the account that associates with the given accountId"
  )
  @ApiResponses(value = {
      @ApiResponse(code = 404, message = "AccountId not exist"),
      @ApiResponse(code = 400, message = "Unable to deposit")
  })
  @ResponseStatus(HttpStatus.OK)
  @PutMapping(path = "/deposit/accountId/{accountId}/amount/{amount}")
  public Account depositFund(@PathVariable Integer accountId, @PathVariable Double amount) {
    try {
      return service.deposit(accountId, amount);
    } catch (Exception e) {
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }

  @ApiOperation(
      value = "Withdraw a fund",
      notes = "Withdraw a fund to the account that associates with the given accountId."
          + "Withdraw amount should not exceed the current balance."
  )
  @ApiResponses(value = {
      @ApiResponse(code = 404, message = "traderId not exist"),
      @ApiResponse(code = 400, message = "Unable to withdraw")
  })
  @ResponseStatus(HttpStatus.OK)
  @PutMapping(path = "/withdraw/accountId/{accountId}/amount/{amount}")
  public Account withdrawFund(@PathVariable Integer accountId, @PathVariable Double amount) {
    try {
      return service.withdraw(accountId, amount);
    } catch (Exception e) {
      throw ResponseExceptionUtil.getResponseStatusException(e);
    }
  }

}
